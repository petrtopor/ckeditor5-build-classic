/**
 * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md.
 */

/**
 * @module image/imagetextalternative/imagetextalternativecommand
 */

import Command from '@ckeditor/ckeditor5-core/src/command';
import { isImage } from '../image/utils';
import _ from 'lodash';

/**
 * The image properties command. It is used to change the `alt` attribute of `<image>` elements.
 *
 * @extends module:core/command~Command
 */
export default class ImagePropertiesCommand extends Command {
	/**
	 * The command value: `false` if there is no `alt` attribute, otherwise the value of the `alt` attribute.
	 *
	 * @readonly
	 * @observable
	 * @member {String|Boolean} #value
	 */

	/**
	 * @inheritDoc
	 */
	refresh() {
		console.log('ImagePropertiesCommand::refresh()');
		const element = this.editor.model.document.selection.getSelectedElement();

		this.isEnabled = isImage( element );

		// if ( isImage( element ) && element.hasAttribute( 'alt' ) ) {
		// 	this.value = element.getAttribute( 'alt' );
		// } else {
		// 	this.value = false;
		// }
		if ( isImage( element ) && element.hasAttribute( 'src' ) ) {
			// this.value = element.getAttribute( 'src' );
			// element.getAttribute('style', 'testStyleEntity: testStyleValue');
			// console.log('ImagePropertiesCommand is getting element.getAttribute(\'style\'):\n', element.getAttribute('style'));
			// console.log('...:\n', document.getElementsByClassName('ck-content')[0].getElementsByTagName('img'));
			// document.getElementsByClassName('ck-content')[0].getElementsByTagName('img').forEach(img => console.log('img: ', img));
      /*
      for (let img of document.getElementsByClassName('ck-content')[0].getElementsByTagName('img')) {
				console.log('IMG.naturalWidth : ', img.naturalWidth);
      }
      */
      // console.log('Selected IMG: ', _.filter(document.getElementsByClassName('ck-content')[0].getElementsByTagName('img'), img => img.src === element.getAttribute( 'src' ))[0]);
      // console.log('Selected IMG naturalWidth === ', Array.from(document.getElementsByClassName('ck-content')[0].getElementsByTagName('img')).filter(img => img.src === element.getAttribute( 'src' ))[0].naturalWidth);
      // console.log('Selected IMG naturalHeight === ', document.getElementsByClassName('ck-content')[0].getElementsByTagName('img').filter(img => img.src === element.getAttribute( 'src' )).naturalHeight);
      // console.log('element.getAttribute( \'src\' ): ', element.getAttribute( 'src' ));
      console.log('Filtered images: ', _.filter(document.getElementsByClassName('ck-content')[0].getElementsByTagName('img'), img => img.src !== ''));
      this.value = {src: element.getAttribute( 'src' )};
			// console.log('element.getAttribute( \'height\' ): ', element.getAttribute( 'height' ));
			// console.log('element.naturalHeight  === ', element.naturalHeight);
		} else {
			this.value = false;
		}
	}

	/**
	 * Executes the command.
	 *
	 * @fires execute
	 * @param {Object} options
	 * @param {String} options.newValue The new value of the `src` attribute to set.
	 */
	execute( options ) {
		console.log('Executing FIRED ImagePropertiesCommand /w options === ', options);
		const model = this.editor.model;
		const imageElement = model.document.selection.getSelectedElement();

		// var src = this.value.src;

		model.change( writer => {
			// writer.setAttribute( 'src', options.newValueSrc, imageElement );
			// console.log('Removing the image NAHUI!');
			writer.remove(imageElement);
			// writer.setAttribute( 'alt', '100 px', imageElement );
			// writer.appendElement( 'paragraph', { alignment: 'center' }, imageElement );
			// console.log('ImagePropertiesCommand::execute() imageElement: \n', imageElement);
			
			// console.log('Now let\'s create a new image.......');
			// const content = '<img src=\"' + options.newValueSrc + '\" style=\"height: 100 px;\" >';
			// const viewFragment = editor.data.processor.toView( content );
			// const modelFragment = editor.data.toModel( viewFragment );
			// model.insertContent( modelFragment );
			// console.log('Mission complete');

			// view._fileInputView.toggleVisible();
		} );
		const content = '<img src=\"' + options.newValueSrc + '\" height=\"' + options.newValueHeight + '\" width=\"' + options.newValueWidth + '\" >';
		const viewFragment = editor.data.processor.toView( content );
		const modelFragment = editor.data.toModel( viewFragment );
    model.insertContent( modelFragment );
    console.log('Для Алексея с Колей: ', editor.editing.view);
	}
}
