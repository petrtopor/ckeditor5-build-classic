/**
 * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md.
 */

/**
 * @module upload/ui/filedialogbuttonview
 */

import ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';
import View from '@ckeditor/ckeditor5-ui/src/view';
import ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';
import './filePickDialogStyle.scss';

/**
 * The file dialog button view.
 *
 * This component provides a button that opens the native file selection dialog.
 * It can be used to implement the UI of a file upload feature.
 *
 *		const view = new FileDialogButtonView( locale );
 *
 *		view.set( {
 *			acceptedType: 'image/*',
 *			allowMultipleFiles: true
 *		} );
 *
 *		view.buttonView.set( {
 *			label: t( 'Insert image' ),
 *			icon: imageIcon,
 *			tooltip: true
 *		} );
 *
 *		view.on( 'done', ( evt, files ) => {
 *			for ( const file of Array.from( files ) ) {
 *				console.log( 'Selected file', file );
 *			}
 *		} );
 *
 * @extends module:ui/view~View
 */
export default class FileDialogButtonView extends View {
	/**
	 * @inheritDoc
	 */
	constructor( locale ) {
		super( locale );

		/**
		 * The button view of the component.
		 *
		 * @member {module:ui/button/buttonview~ButtonView}
		 */
		this.buttonView = new ButtonView( locale );

		/**
		 * A hidden `<input>` view used to execute file dialog.
		 *
		 * @protected
		 * @member {module:upload/ui/filedialogbuttonview~FileInputView}
		 */
		this._fileInputView = new FileInputView( locale );

		/**
		 * Accepted file types. Can be provided in form of file extensions, media type or one of:
		 * * `audio/*`,
		 * * `video/*`,
		 * * `image/*`.
		 *
		 * @observable
		 * @member {String} #acceptedType
		 */
		this._fileInputView.bind( 'acceptedType' ).to( this );

		/**
		 * Indicates if multiple files can be selected. Defaults to `true`.
		 *
		 * @observable
		 * @member {Boolean} #allowMultipleFiles
		 */
		this._fileInputView.bind( 'allowMultipleFiles' ).to( this );

		/**
		 * Fired when file dialog is closed with file selected.
		 *
		 *		view.on( 'done', ( evt, files ) => {
		 *			for ( const file of files ) {
		 *				console.log( 'Selected file', file );
		 *			}
		 *		}
		 *
		 * @event done
		 * @param {Array.<File>} files Array of selected files.
		 */
<<<<<<< HEAD
		this.on( 'done', ( evt, files ) => {
			for ( const file of files ) {
				console.log( 'Selected file', file );
			}
		});
		this._fileInputView.delegate( 'done' ).to( this );
		this.on( 'toggleVisibleEvent', (evt, msg) => console.log('caught toggleVisibleEvent from FileInputViev _fileInputView /w msg: ', msg))
		this.delegate( 'toggleVisibleEvent' ).to( this );
		this.on( 'picPick', (evt, imgSrc) => this.fire('xui', imgSrc));
		// this._fileInputView.delegate( 'picPick' ).to( this );

=======
    this.on( 'done', ( evt, files ) => {
      for ( const file of files ) {
        console.log( 'Selected file', file );
      }
    });
    // this._fileInputView.delegate( 'done' ).to( this );
    this.listenTo(this._fileInputView, 'picturePicked', (evt, imgSrc) => this.fire('picturePicked', imgSrc));
>>>>>>> 4f25333f46515bc69331955a2cd59912900bae54
		this.setTemplate( {
			tag: 'span',
			attributes: {
				class: 'ck-file-dialog-button',
			},
			children: [
				this.buttonView,
				this._fileInputView
			]
		} );

		this.buttonView.on( 'execute', () => this._fileInputView.toggleVisible());
	}

	/**
	 * Focuses the {@link #buttonView}.
	 */
	focus() {
		this.buttonView.focus();
	}
}

class PictureView extends View {
  constructor( locale, imgSrc, imgName ) {
    super( locale );
    const bind = this.bindTemplate;
    this.setTemplate( {
      tag: 'div',
      attributes: {
      	class: ['picture_box']
      },
      on: {
      	click: bind.to(evt => this.fire( 'picturePicked', imgSrc ))
      },

      children: [
      {
      	tag: 'div',
      	attributes: {
      		class: ['picture_box_main']
      	},

      	children: [
      	{
      		tag: 'img',
      		attributes: {
      			src: [imgSrc]
      		}
      	}]
      },
      {
      	tag: 'div',
      	attributes: {
      		class: ['picture_box_name']
      	},

      	children: [
      	{
      		tag: 'span',

      		children: [
      		{
      			text: imgName
      		}]
      	}]
      }]
    } );
  }
}

/**
 * The hidden file input view class.
 *
 * @private
 * @extends {module:ui/view~View}
 */
class FileInputView extends View {
	/**
	 * @inheritDoc
	 */
	constructor( locale ) {
    super( locale );
    this.url = "https://api.b2bfamily.com/upload/img/?apikey=P8hSqAUJjfciHBBldexsv5syya7EUpeM4rax2KbLL0ZS9tf3Lf";
    this.pictureViews = new ViewCollection(locale);
    const self = this;
    this.fetchImagesFromServer(this.url).then(response => response.forEach(imageElement => {
      let pictureView = new PictureView( locale, "https://" + imageElement.path, imageElement.name );
      // pidorView.delegate('picturePicked').to(this);
      self.pictureViews.add(pictureView);
    })).then(() => self.pictureViews.map(pictureView => self.listenTo(pictureView, 'picturePicked', (evt, imgSrc) => self.fire('picturePicked', imgSrc))));
    // forEach(pictureView => this.listenTo(pictureView, 'picturePicked', (evt, imgSrc) => this.fire('picPick', imgSrc)))
    // this.on('picturePicked', (evt, imgSrc) => this.fire('picPick', imgSrc));
		/**
		 * Accepted file types. Can be provided in form of file extensions, media type or one of:
		 * * `audio/*`,
		 * * `video/*`,
		 * * `image/*`.
		 *
		 * @observable
		 * @member {String} #acceptedType
		 */
		this.set( 'acceptedType' );

		/**
		 * Indicates if multiple files can be selected. Defaults to `false`.
		 *
		 * @observable
		 * @member {Boolean} #allowMultipleFiles
		 */
		this.set( 'allowMultipleFiles', false );

		const bind = this.bindTemplate;

		const imagePickDialogueTemplate = {
      tag: 'div',

			attributes: {
				id: [
					'dialogue',
        ],
				tabindex: '-1'
			},

			children: [
				{
					tag: 'div',

					attributes: {
						id: ['dialogue_title']
					},

					children: [
					{
						tag: 'span',
						
						children: [
						{
							text: 'Свойства изображения'
						}]
					}]
				},
				{
					tag: 'div',
					attributes: {
						id: ['dialogue_content']
					},

					children: [
					{
						tag: 'div',
						attributes: {
							id: ['dialogue_controls']
						},

						children: [
						{
							tag: 'div',
							attributes: {
								id: ['pic_pick']
							},

							children: [
							{
								tag: 'div',
								attributes: {
									id: ['link']
								},

								children: [
								{
									tag: 'div',
									attributes: {
										class: ['caption']
									},

									children: [
									{
										tag: 'label',
										attributes: {
											for: ['link_input']
										},

										children: [
										{
											text: 'Ссылка'
										}]
									}]
								},
								{
									tag: 'div',
									attributes: {
										class: ['input']
									},

									children: [
									{
										tag: 'input',
										attributes: {
											id: ['link_input'],
											type: ['text']
										}
									}]
								}]
							},
							{
								tag: 'div',
								attributes: {
									id: ['upload']
								},

								children: [
								{
									tag: 'div',
									attributes: {
										class: ['caption']
									},

									children: [
									{
										tag: 'label',
										attributes: {
											for: ['img_upload']
										},

										children: [
										{
											text: 'Загрузить на сервер'
										}]
									}]
								},
								{
									tag: 'div',
									attributes: {
										class: ['input']
									},

									children: [
									{
										tag: 'form',
										attributes: {
											id: ['files_upload']
										},

										children: [
										{
											tag: 'input',
											attributes: {
												id: ['img_upload'],
												type: ['file'],
												name: ['FileUpload'],
												accept: ['.jpg,.jpeg,.png,.gif']
											}
										}]
									}]
								}]
							}]
						},
						{
							tag: 'div',
							attributes: {
								id: ['alt_txt']
							},

							children: [
							{
								tag: 'div',
								attributes: {
									class: ['caption']
								},

								children: [
								{
									tag: 'label',
									attributes: {
										for: ['alttxt_input']
									},

									children: [
									{
										text: 'Альтернативный текст'
									}]
								}]
							},
							{
								tag: 'div',
								attributes: {
									class: ['input']
								},

								children: [
								{
									tag: 'input',
									attributes: {
										id: ['alttxt_input'],
										type: ['text']
									}
								}]
							}]
						},
						{
							tag: 'div',
							attributes: {
								id: ['pic_props']
							},

							children: [
							{
								tag: 'div',
								attributes: {
									class: ['pic_prop']
								},

								children: [
								{
									tag: 'div',
									attributes: {
										class: ['caption']
									},

									children: [
									{
										tag: 'span',
										 children: [
										 {
										   text: 'Ширина'
										 }]
									}]
								},
								{
									tag: 'div',
									attributes: {
										class: ['input']
									},

									children: [
									{
										tag: 'input'
									}]
								}]
							},
							{
								tag: 'div',
								attributes: {
									class: ['pic_prop']
								},

								children: [
								{
									tag: 'div',
									attributes: {
										class: ['caption']
									},

									children: [
									{
										tag: 'span',
										 children: [
										 {
										   text: 'Высота'
										 }]
									}]
								},
								{
									tag: 'div',
									attributes: {
										class: ['input']
									},

									children: [
									{
										tag: 'input'
									}]
								}]
							},
							{
								tag: 'div',
								attributes: {
									class: ['pic_prop']
								},

								children: [
								{
									tag: 'div',
									attributes: {
										class: ['caption']
									},

									children: [
									{
										tag: 'span',
										 children: [
										 {
										   text: 'Граница'
										 }]
									}]
								},
								{
									tag: 'div',
									attributes: {
										class: ['input']
									},

									children: [
									{
										tag: 'input'
									}]
								}]
							},
							{
								tag: 'div',
								attributes: {
									class: ['pic_prop']
								},

								children: [
								{
									tag: 'div',
									attributes: {
										class: ['caption']
									},

									children: [
									{
										tag: 'span',
										 children: [
										 {
										   text: 'Гориз. отступ'
										 }]
									}]
								},
								{
									tag: 'div',
									attributes: {
										class: ['input']
									},

									children: [
									{
										tag: 'input'
									}]
								}]
							},
							{
								tag: 'div',
								attributes: {
									class: ['pic_prop']
								},

								children: [
								{
									tag: 'div',
									attributes: {
										class: ['caption']
									},

									children: [
									{
										tag: 'span',
										 children: [
										 {
										   text: 'Вертик. отступ'
										 }]
									}]
								},
								{
									tag: 'div',
									attributes: {
										class: ['input']
									},

									children: [
									{
										tag: 'input'
									}]
								}]
							},
							{
								tag: 'div',
								attributes: {
									class: ['pic_prop']
								},

								children: [
								{
									tag: 'div',
									attributes: {
										class: ['caption']
									},

									children: [
									{
										tag: 'span',
										 children: [
										 {
										   text: 'Выравнивание'
										 }]
									}]
								},
								{
									tag: 'div',
									attributes: {
										class: ['input']
									},

									children: [
									{
										tag: 'input'
									}]
								}]
							}]
						}]
					},
					{
						tag: 'div',
						attributes: {
							id: ['pictures']
						},
						children: this.pictureViews
					}]
				},
				{
					tag: 'div',
						attributes: {
							id: ['dialogue_footer']
						},

						children: [
						{
							tag: 'span',
							attributes: {
								id: ['ok'],
								class: ['footer_button']
							},

							children: [
							{
								text: 'OK'
							}]
						},
						{
							tag: 'span',
							attributes: {
								id: ['cancel'],
								class: ['footer_button']
							},

							children: [
							{
								text: 'OTMEHA'
							}]
						}]
				}
			]
    }
    
    const ImagePickInputTemplate = {
			tag: 'input',

			attributes: {
				// class: [
				// 	'ck-hidden'
        // ],
        style: 'display: none',
				type: 'file',
				tabindex: '-1',
				accept: bind.to( 'acceptedType' ),
				multiple: bind.to( 'allowMultipleFiles' )
			},

			on: {
				// Removing from code coverage since we cannot programmatically set input element files.
				change: bind.to( /* istanbul ignore next */ () => {
					if ( this.element && this.element.files && this.element.files.length ) {
						this.fire( 'done', this.element.files );
					}

					this.element.value = '';
        } ),
        click: bind.to(() => {
          console.log('this.element.style: ', this.element.style)
        })
			}
		}

    this.setTemplate( imagePickDialogueTemplate );
	}

	/**
	 * Opens file dialog.
	 */
	open() {
		this.element.click();
  }
  toggleVisible() {
    this.element.classList.toggle('visible');
  }
  // url = "https://api.b2bfamily.com/upload/img/?apikey=P8hSqAUJjfciHBBldexsv5syya7EUpeM4rax2KbLL0ZS9tf3Lf";
  fetchImagesFromServer(url) {
    return new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      xhr.open("GET", url);
      xhr.onload = () => resolve(JSON.parse(xhr.responseText));
      xhr.onerror = () => reject(xhr.statusText);
      xhr.send();
    });
  }
}
